General asynchronous syscall mechanism

```
struct asys_seq
{
    uint8_t op;
    union sysargs_t args;

    int8_t status;
    uint64_t response; /* sysfree-able pointer */
    int64_t n;
    int8_t user_data[n];
}
```
e.g.
```
asys_seq
{
    .op = SYS_READ,
    .args = read
    {
        .pos =-1,
        .len = 128
    },
    .n = ASYS_SEQ_SET
}
```

Example code:

```
uint64_t user_lens[] = {1}; /* Length of each request */
asyscall_req *request = mkasysbuf(1 /* num requests */, user_lens /* lens */);

request->op = SYS_READ;
request->args.read.pos = -1;
request->args.read.len = 128;
request->n = 0;

__atomic_store_n(request->status, ASYS_SEQ_SET, __ATOMIC_RELAXED);
futex_wait(request->status, 0);

/* Ready, read result */
printf("%s", ((asys_resp *)request->response)->data);
```
